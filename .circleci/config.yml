version: 2.1

executors:
  qsharp:
    docker:
      - image: vputz/cimg_python_qsharp

jobs:
    test:
        description: |
            Simple drop-in job to setup a python project, run tests and store the test results if possible.
            If test-tool is pytest, the job assumes the project defines pytest in the dependency file.
            Otherwise, use the built in unittest module as the test-tool.
        executor:
            name: qsharp
        parameters:
            app-dir:
                default: ~/project
                description: Path to the directory containing your python project. Not needed if dependency file lives in the root.
                type: string
            args:
                default: ""
                description: Arguments to pass to install command for pipenv and poetry. Override '-r requirements.txt' for pip.
                type: string
            cache-version:
                default: v1
                description: Change the default cache version if you need to clear the cache for any reason.
                type: string
            include-branch-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will only apply to jobs within the same branch.
                type: boolean
            include-python-in-cache-key:
                default: true
                description: |
                    If true, this cache bucket will checksum the pyenv python version with the cache-key
                type: boolean
            pip-dependency-file:
                default: requirements.txt
                description: Name of the requirements file that needs to be installed with pip. Prepended with `app-dir`. If using pipenv or poetry, this is ignored.
                type: string
            pkg-manager:
                default: pip
                description: Select the package manager to use. Default is pip
                enum:
                    - pip
                    - pipenv
                    - poetry
                    - pip-dist
                type: enum
            pypi-cache:
                default: true
                description: Keep all versions of pypi and site-package caches for faster rebuilding overall.
                type: boolean
            setup:
                default: []
                description: Provide any optional steps you would like to run prior to install the python project.
                type: steps
            test-tool:
                default: unittest
                description: The tool to run the tests with.
                enum:
                    - pytest
                    - unittest
                type: enum
            venv-cache:
                default: true
                description: Use the lockfile to cache the virtualenv. Not used with pip as pkg-manager.
                type: boolean
            version:
                default: "3.8"
                description: |
                    A full version tag must be specified. Example: "3.8"
                    For a full list of releases, see the following: https://hub.docker.com/r/cimg/python
                type: string
        steps:
            - checkout
            - steps: << parameters.setup >>
            - install-packages:
                app-dir: <<parameters.app-dir>>
                args: <<parameters.args>>
                cache-version: <<parameters.cache-version>>
                include-branch-in-cache-key: <<parameters.include-branch-in-cache-key>>
                include-python-in-cache-key: <<parameters.include-python-in-cache-key>>
                pip-dependency-file: <<parameters.pip-dependency-file>>
                pkg-manager: <<parameters.pkg-manager>>
                pypi-cache: <<parameters.pypi-cache>>
                venv-cache: <<parameters.venv-cache>>
            - when:
                condition:
                    equal:
                        - unittest
                        - << parameters.test-tool >>
                steps:
                    - when:
                        condition:
                            or:
                                - equal:
                                    - poetry
                                    - << parameters.pkg-manager >>
                                - equal:
                                    - pipenv
                                    - << parameters.pkg-manager >>
                        steps:
                            - run:
                                command: <<parameters.pkg-manager>> run python -m unittest
                                name: Run tests with <<parameters.pkg-manager>> run
                    - when:
                        condition:
                            or:
                                - equal:
                                    - pip
                                    - << parameters.pkg-manager >>
                                - equal:
                                    - pip-dist
                                    - << parameters.pkg-manager >>
                        steps:
                            - run:
                                command: |
                                    export PYTHONPATH=$PWD:$PYTHONPATH
                                    python -m unittest
                                name: Run tests with global python env
                                working_directory: <<parameters.app-dir>>
            - when:
                condition:
                    equal:
                        - pytest
                        - << parameters.test-tool >>
                steps:
                    - run:
                        command: mkdir test-report
                        name: Create test-report directory
                        working_directory: <<parameters.app-dir>>
                    - when:
                        condition:
                            or:
                                - equal:
                                    - poetry
                                    - << parameters.pkg-manager >>
                                - equal:
                                    - pipenv
                                    - << parameters.pkg-manager >>
                        steps:
                            - run:
                                command: <<parameters.pkg-manager>> run pytest --junit-xml=test-report/report.xml
                                name: Run tests with <<parameters.pkg-manager>> run
                                working_directory: <<parameters.app-dir>>
                    - when:
                        condition:
                            or:
                                - equal:
                                    - pip
                                    - << parameters.pkg-manager >>
                                - equal:
                                    - pip-dist
                                    - << parameters.pkg-manager >>
                        steps:
                            - run:
                                command: pytest --junit-xml=test-report/report.xml
                                name: Run tests with global python env
                                working_directory: <<parameters.app-dir>>
                    - store_test_results:
                        path: <<#parameters.app-dir>><<parameters.app-dir>>/<</parameters.app-dir>>test-report

workflows:
  main:
    jobs:
      - test:
          args: '-E qcware-quasar -E qiskit -E pyzx -E braket -E qsharp'
          pkg-manager: poetry
          test-tool: pytest
